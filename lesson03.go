// УКАЗАТЕЛИ В GO

// Указатель - значение адреса блока памяти, в котором храниться значение переменной.
// По умоляанию, значением указателей является nil.

package main

import "fmt"

func main() {
	getMemoryAdress() // Создаем указатель на переменную
	getValue()        // Извлекаем значение переменной из указателя
	changeValue()     // Меняем значение переменной по указателю

	homeWork01()
	homeWork02()
}

// Создать указатель (получить адрес переменной), можно при помощи оператора &(амперсанд).
// Также создать указатель можно при инициации переменной при помощи функции new().
// Функция new() принимает тип данных и выделяет ячейку памяти с адресом для этого типа данных
func getMemoryAdress() {
	fmt.Println("ТЕОРИЯ: СОЗДАЕМ УКАЗАТЕЛИ")
	// Инициируем переменную
	var randomVar int
	// Создаем указатель на нее при помощи &
	pntr1 := &randomVar
	fmt.Println("Создаем указатель при помощи амперсанда, его значение:", pntr1)
	// Создаем указатель на нее при функции new
	pntr2 := new(int)
	fmt.Println("Создаем указатель при помощи функции new(), его значение:", pntr2)
}

// Чтобы получить значение перемнной на которую ссылается указатель нужно его "разыменовать".
// Для этого нужно использовать оператор *
func getValue() {
	fmt.Println("ТЕОРИЯ: ИЗВЛЕКАЕМ ЗНАЧЕНИЕ ПЕРЕМЕННОЙ ПО УКАЗАТЕЛЮ")
	randomVar := "Рандомное значение" // Инициируем переменную
	pntr := &randomVar                // Создаем указатель на нее при помощи &
	fmt.Println("Переменная расположена в яцейке номер", &randomVar)
	fmt.Println("Значение переменной:", *pntr) // "Разыменовываем" указатель при помощи *
}

// Через указатель можно изменить значение перемнной на которую он ссылается.
func changeValue() {
	fmt.Println("ТЕОРИЯ: МЕНЯЕМ ЗНАЧЕНИЕ ПЕРЕМЕННОЙ ПО УКАЗАТЕЛЮ")
	randomVar := "Одно рандомное значение" // Инициируем переменную
	pntr := &randomVar                     // Создаем указатель на нее при помощи &
	fmt.Println("Было такое:", *pntr)
	*pntr = "Другое рандомное значение" // Меняем значение пересенной через указатель
	fmt.Println("Стало такое:", *pntr)
}

func homeWork01() {
	fmt.Println("ПРАКТИКА 01")
	// Задание 01:
	// 1) Объявите переменную А как указатель на int;
	// 2) Объявите переменную B - целочиленную с произвольным значением;
	// 3) Присвойте в переменную А указатель на В и выведите на экрана значение В путем разыменовывания указателя А;
	// 4) Присвойте В новое значение через указатель А и выведите на экран новое значение В;
	A := new(int)
	fmt.Println("1) Переменная А объявлена и находится по адресу:", A)
	B := 123
	fmt.Println("2) Переменная В объявлена и ей присвоено значение:", B)
	A = &B
	fmt.Println("3) Переменная А стала указателем на переменную В. Ее значение:", A)
	*A = 321
	fmt.Println("4) Переменной А присвоено новое значение:", *A)
}

func homeWork02() {
	fmt.Println("ПРАКТИКА 02")
	// Задание 02:
	// 1) Найдите радиус окружности если ее длина равна 35
	// 2) Радиус окружности R обьявите нак указатель на float64
	// 3) Вычислите площать круга используйте разыменовывание указателя R
	const circleLength, pi_dig = 35, 3.4
	fmt.Println("1) Длина окружности равна", circleLength)
	R := new(float64)
	fmt.Println("2) Переменная R стала указателем на float64 по адресу:", R)
	*R = circleLength / (2 * pi_dig)
	fmt.Println("3) Переменной R присвоено значение:", *R)
	S := new(float64)
	*S = pi_dig * (*R * *R)
	fmt.Println("4) Площадь окружности равна", *S)
}
